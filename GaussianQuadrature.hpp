//
// Created by kuznetsov on 30/01/24.
//

#pragma once

#include <array>

namespace DefiniteIntegrals
{
    template <std::size_t... N>
    struct Quadrature;

    template <std::size_t dim>
    struct Node
    {
        std::array<double, dim> point;
        double weight;
    };

    template <std::size_t currentIndex, std::size_t... N>
    constexpr std::array<double, sizeof...(N)> getPoint()
    {
        std::size_t NN = (N * ...);
        static_assert(currentIndex < (N * ...));
        std::size_t t = currentIndex;
        std::size_t c = currentIndex;
        return {Quadrature<N>::nodes[(NN /= N, c = t / NN, t = t % NN, c)].point[0]...};
    }

    template <std::size_t currentIndex, std::size_t... N>
    constexpr double getWeight()
    {
        std::size_t NN = (N * ...);
        static_assert(currentIndex < (N * ...));
        std::size_t t = currentIndex;
        std::size_t c = currentIndex;
        return (Quadrature<N>::nodes[(NN /= N, c = t / NN, t = t % NN, c)].weight * ...);
    }

    template <std::size_t... N, std::size_t... i>
    constexpr std::array<Node<sizeof...(N)>, (N * ...)> createNodes(const std::index_sequence<i...>)
    {
        return {Node<sizeof...(N)>{getPoint<i, N...>(), getWeight<i, N...>()}...};
    }

    template <std::size_t... N>
    struct Quadrature
    {
        static constexpr std::size_t dim = sizeof...(N);
        static constexpr std::size_t size = (... * N);
        static constexpr std::array<Node<dim>, size> nodes = createNodes<N...>(std::make_index_sequence<size>());
    };

    // специализации
    template <>
    struct Quadrature<1>
    {
        static constexpr std::size_t dim = 1;
        static constexpr std::size_t size = 1;
        static constexpr std::array<Node<1>, size> nodes = {Node<1>{{0.5}, 1.}};
    };

    template <>
    struct Quadrature<2>
    {
        static constexpr std::size_t dim = 1;
        static constexpr std::size_t size = 2;
        static constexpr std::array<Node<1>, size> nodes = {
            Node<1>{
                {
                    0.211324865405187117745425609749021272176199124364936561990698836758011163848533327153142302207125237387
                },
                0.5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            },
            Node<1>{
                {
                    0.788675134594812882254574390250978727823800875635063438009301163241988836151466672846857697792874762612
                },
                0.5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            }
        };
    };

    template <>
    struct Quadrature<3>
    {
        static constexpr std::size_t dim = 1;
        static constexpr std::size_t size = 3;
        static constexpr std::array<Node<1>, size> nodes = {
            Node<1>{
                {
                    0.112701665379258311482073460021760038916707829470840917341242623388651690806302096648071262314132648208
                },
                0.2777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
            },
            Node<1>{
                {
                    0.500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                },
                0.4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444
            },
            Node<1>{
                {
                    0.887298334620741688517926539978239961083292170529159082658757376611348309193697903351928737685867351791
                },
                0.2777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
            }
        };
    };

    template <>
    struct Quadrature<4>
    {
        static constexpr std::size_t dim = 1;
        static constexpr std::size_t size = 4;
        static constexpr std::array<Node<1>, size> nodes = {
            Node<1>{
                {
                    0.069431844202973712388026755553595247452137310185141181192139039546735264252475567147918830057760347394
                },
                0.1739274225687269286865319746109997036176743479169467702462646597593759337329551758609918838661290797548
            },
            Node<1>{
                {
                    0.330009478207571867598667120448377656399712065114542823703523011589489984768381482761062359782222594225
                },
                0.3260725774312730713134680253890002963823256520830532297537353402406240662670448241390081161338709202451
            },
            Node<1>{
                {
                    0.669990521792428132401332879551622343600287934885457176296476988410510015231618517238937640217777405774
                },
                0.3260725774312730713134680253890002963823256520830532297537353402406240662670448241390081161338709202451
            },
            Node<1>{
                {
                    0.930568155797026287611973244446404752547862689814858818807860960453264735747524432852081169942239652605
                },
                0.1739274225687269286865319746109997036176743479169467702462646597593759337329551758609918838661290797548
            }
        };
    };

    template <>
    struct Quadrature<5>
    {
        static constexpr std::size_t dim = 1;
        static constexpr std::size_t size = 5;
        static constexpr std::array<Node<1>, size> nodes = {
            Node<1>{
                {
                    0.046910077030668003601186560850303517437174044618734568563118856728114602541656576529428505223228869044
                },
                0.1184634425280945437571320203599586813216300011062070077914139441108586442015215492899967152469757223880
            },
            Node<1>{
                {
                    0.230765344947158454481842789649895597516356696547220021898884186470264407316122354482098166374714534214
                },
                0.2393143352496832340206457574178190964561477766715707699863638336669191335762562284877810625308020553897
            },
            Node<1>{
                {
                    0.500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                },
                0.2844444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444
            },
            Node<1>{
                {
                    0.769234655052841545518157210350104402483643303452779978101115813529735592683877645517901833625285465785
                },
                0.2393143352496832340206457574178190964561477766715707699863638336669191335762562284877810625308020553897
            },
            Node<1>{
                {
                    0.953089922969331996398813439149696482562825955381265431436881143271885397458343423470571494776771130955
                },
                0.1184634425280945437571320203599586813216300011062070077914139441108586442015215492899967152469757223880
            }
        };
    };

    template <>
    struct Quadrature<6>
    {
        static constexpr std::size_t dim = 1;
        static constexpr std::size_t size = 6;
        static constexpr std::array<Node<1>, size> nodes = {
            Node<1>{
                {
                    0.033765242898423986093849222753002695432617131143855087563725191736693249577899901861855630039037007476
                },
                0.0856622461895851725201480710863664467634112507420219911993177198994728802711700773239638527131943348760
            },
            Node<1>{
                {
                    0.169395306766867743169300202490047326496775717802414964592736647073908251696428449527856798126769271785
                },
                0.1803807865240693037849167569188580558307609463733727411448696201185700189186308591604811009944096739715
            },
            Node<1>{
                {
                    0.380690406958401545684749139159644032290694684929989324909302417712862532862180078875387786371325434195
                },
                0.2339569672863455236949351719947754974058278028846052676558126599819571008101990635155550462923959911523
            },
            Node<1>{
                {
                    0.619309593041598454315250860840355967709305315070010675090697582287137467137819921124612213628674565804
                },
                0.2339569672863455236949351719947754974058278028846052676558126599819571008101990635155550462923959911523
            },
            Node<1>{
                {
                    0.830604693233132256830699797509952673503224282197585035407263352926091748303571550472143201873230728214
                },
                0.1803807865240693037849167569188580558307609463733727411448696201185700189186308591604811009944096739715
            },
            Node<1>{
                {
                    0.966234757101576013906150777246997304567382868856144912436274808263306750422100098138144369960962992523
                },
                0.0856622461895851725201480710863664467634112507420219911993177198994728802711700773239638527131943348760
            }
        };
    };

    template <>
    struct Quadrature<7>
    {
        static constexpr std::size_t dim = 1;
        static constexpr std::size_t size = 7;
        static constexpr std::array<Node<1>, size> nodes = {
            Node<1>{
                {
                    0.025446043828620737736905157976074368799614531164691108225615448043468334822579929597134614986037137927
                },
                0.0647424830844348466353057163395410091642937011299733319886043193623276174860211543578127090814604225447
            },
            Node<1>{
                {
                    0.129234407200302780068067613359605796462926176429304869940022324016285062663909743103586583816568376470
                },
                0.1398526957446383339507338857118897912434625326132993822685070163468094052152813384066204714505988093831
            },
            Node<1>{
                {
                    0.297077424311301416546696793961519268326308992950314936806478374102668093386937172335843655136126706117
                },
                0.1909150252525594724751848877444875669391825417669313673755417255153527732170648541743423296720224007251
            },
            Node<1>{
                {
                    0.500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                },
                0.2089795918367346938775510204081632653061224489795918367346938775510204081632653061224489795918367346938
            },
            Node<1>{
                {
                    0.702922575688698583453303206038480731673691007049685063193521625897331906613062827664156344863873293882
                },
                0.1909150252525594724751848877444875669391825417669313673755417255153527732170648541743423296720224007251
            },
            Node<1>{
                {
                    0.870765592799697219931932386640394203537073823570695130059977675983714937336090256896413416183431623529
                },
                0.1398526957446383339507338857118897912434625326132993822685070163468094052152813384066204714505988093831
            },
            Node<1>{
                {
                    0.974553956171379262263094842023925631200385468835308891774384551956531665177420070402865385013962862072
                },
                0.0647424830844348466353057163395410091642937011299733319886043193623276174860211543578127090814604225447
            }
        };
    };

    template <>
    struct Quadrature<8>
    {
        static constexpr std::size_t dim = 1;
        static constexpr std::size_t size = 8;
        static constexpr std::array<Node<1>, size> nodes = {
            Node<1>{
                {
                    0.019855071751231884158219565715263504785882382849273980864180111313787551128290357780280520368343865844
                },
                0.0506142681451881295762656771549810950576970455258424785295018490323700893817353924301413696520225032790
            },
            Node<1>{
                {
                    0.101666761293186630204223031762084781581414134192017583964914852480391347161763453926424036352137030490
                },
                0.1111905172266872352721779972131204422150654350256247823629546446468084072852245204268265711885989639210
            },
            Node<1>{
                {
                    0.237233795041835507091130475405376825479017878439803571124571450363772589615719363738019299903184008969
                },
                0.1568533229389436436689811009933006566301644995013674688451319725374781359710867484808490381169642780247
            },
            Node<1>{
                {
                    0.408282678752175097530261928819908009666621093543513108841405763150397762889228942941965888144438323127
                },
                0.1813418916891809914825752246385978060970730199471652702624115337833433673619533386621830210424142547751
            },
            Node<1>{
                {
                    0.591717321247824902469738071180091990333378906456486891158594236849602237110771057058034111855561676872
                },
                0.1813418916891809914825752246385978060970730199471652702624115337833433673619533386621830210424142547751
            },
            Node<1>{
                {
                    0.762766204958164492908869524594623174520982121560196428875428549636227410384280636261980700096815991030
                },
                0.1568533229389436436689811009933006566301644995013674688451319725374781359710867484808490381169642780247
            },
            Node<1>{
                {
                    0.898333238706813369795776968237915218418585865807982416035085147519608652838236546073575963647862969509
                },
                0.1111905172266872352721779972131204422150654350256247823629546446468084072852245204268265711885989639210
            },
            Node<1>{
                {
                    0.980144928248768115841780434284736495214117617150726019135819888686212448871709642219719479631656134155
                },
                0.0506142681451881295762656771549810950576970455258424785295018490323700893817353924301413696520225032790
            }
        };
    };
} // namespace DefiniteIntegrals
